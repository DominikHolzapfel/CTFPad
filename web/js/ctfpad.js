// Generated by CoffeeScript 1.12.4
(function() {
  $(function() {
    var sessid, sock, updateProgress;
    sock = new WebSocket("wss" + (location.href.substring(5, location.href.lastIndexOf('/'))));
    sock.onopen = function() {
      sock.send("\"" + sessid + "\"");
      $(".contentlink[href='" + location.hash + "']").click();
      sock.onclose = function() {
        if (!window.preventSocketAlert) {
          alert('the websocket has been disconnected, reloading the page');
          return document.location.reload();
        }
      };
      return sock.onmessage = function(event) {
        var chal, current, i, len, msg, msgData, ref, self, subject, user;
        msg = JSON.parse(event.data);
        if (msg.type === 'done') {
          self = $("input[data-chalid='" + msg.subject + "']");
          self.prop('checked', msg.data);
          self.parent().next().css('text-decoration', msg.data ? 'line-through' : 'none');
          if (msg.data) {
            self.parent().parent().addClass('done');
          } else {
            self.parent().parent().removeClass('done');
          }
          return updateProgress();
        } else if (msg.type === 'assign') {
          self = $(".labels[data-chalid='" + msg.subject + "']");
          if (msg.data[1]) {
            self.append($("<li />").append($("<span />").addClass("label").attr("data-name", msg.data[0].name).text(msg.data[0].name)));
          } else {
            self.find(".label[data-name='" + msg.data[0].name + "']").parent().remove();
          }
          return $(".assignment-count[data-chalid='" + msg.subject + "']").text(self.first().find('.label').length);
        } else if (msg.type === 'ctfmodification') {
          return $('#ctfmodification').fadeIn(500);
        } else if (msg.type === 'login') {
          $('#userlist').append($("<li />").text(msg.data));
          return $('#usercount').text($('#userlist').children('li').length);
        } else if (msg.type === 'logout') {
          $("#userlist li:contains('" + msg.data + "')").remove();
          $('#usercount').text($('#userlist').children('li').length);
          return $(".active-user[data-name='" + msg.name + "']").remove;
        } else if (msg.type === 'fileupload' || msg.type === 'filedeletion') {
          if ((msg.data + "files") === window.currentPage) {
            current = window.currentPage;
            window.currentPage = null;
            $(".contentlink[href='#" + current + "']").click();
          }
          subject = $(".contentlink[href='#" + msg.data + "files']");
          if (msg.filecount > 0) {
            subject.children('i').removeClass('icon-folder-close').addClass('icon-folder-open');
          } else {
            subject.children('i').removeClass('icon-folder-open').addClass('icon-folder-close');
          }
          return subject.nextAll('sup').text(msg.filecount);
        } else if (msg.type === 'setactive') {
          $(".active-user[data-name='" + msg.name + "']").remove();
          if (msg.challenge !== void 0) {
            return $("#activeUsers" + msg.challenge).append($('<span />').addClass('active-user').css('background-color', msg.color).attr('data-name', msg.name).text(msg.name));
          }
        } else if (msg.type === 'chat') {
          self = $('#chats');
          ref = msg.data;
          for (i = 0, len = ref.length; i < len; i++) {
            msgData = ref[i];
            user = msgData.name ? msgData.name : msgData.user;
            self.append($("<tr />").css("width", "100%").append($("<td />").css("width", "100%").append($("<span />").addClass("label label-default").css("background-color", msgData.color).text(user)).append($("<p />").css("display", "inline").text(" " + msgData.message))).append($("<td />").attr("valign", "top").css("padding-right", "1px").append($("<i />").text(msgData.time.substring(11, 19)))));
          }
          if ($("#chat-scroll").prop('checked')) {
            return $(".chat-body").animate({
              scrollTop: $(".chat-body").prop("scrollHeight")
            });
          }
        } else if (msg.type === 'setimpact') {
          console.log(msg);
          chal = $(".challenge[data-challengeid=" + msg.id + "]");
          chal.attr('data-impactvalue', msg.value).find('option').attr('selected', false);
          chal.find("option[value=" + msg.name + "]").attr('selected', true);
          return window.updatePriority();
        } else {
          return alert(event.data);
        }
      };
    };
    window.onbeforeunload = function() {
      window.preventSocketAlert = true;
    };
    sessid = $.cookie('ctfpad');
    if ($.cookie('ctfpad_hide') === void 0) {
      $.cookie('ctfpad_hide', 'false');
    }
    updateProgress = function() {
      var d, score, totalScore;
      d = $('.challenge.done').length / $('.challenge').length;
      $('#progress').css('width', (d * 100) + "%");
      $('#progress').siblings('span').text(($('.challenge.done').length) + " / " + ($('.challenge').length));
      totalScore = 0;
      score = 0;
      $('.challenge').each(function() {
        totalScore += parseInt($(this).attr('data-chalpoints'));
        if ($(this).hasClass('done')) {
          return score += parseInt($(this).attr('data-chalpoints'));
        }
      });
      $('#scoreprogress').css('width', ((score / totalScore) * 100) + "%");
      $('#scoreprogress').siblings('span').text(score + " / " + totalScore);
      return $('.category').each(function() {
        var cat, done;
        cat = $(this).attr('data-category');
        done = $(this).siblings(".done[data-category='" + cat + "']").length;
        return $(this).find('.done-count').text(done);
      });
    };
    updateProgress();
    window.uploads = [];
    window.upload_refresh = function(remove) {
      var i, len, progress, ref, total_prog, total_size, upload;
      if (remove) {
        window.uploads.splice(window.uploads.indexOf(remove), 1);
        if (window.uploads.length === 0) {
          $('#uploadbutton').hide();
          return;
        }
      }
      total_size = total_prog = 0;
      ref = window.uploads;
      for (i = 0, len = ref.length; i < len; i++) {
        upload = ref[i];
        total_size += upload.file.size;
        total_prog += upload.progress;
      }
      progress = parseInt(total_prog / total_size * 100, 10);
      return $('#uploadprogress').text(progress + "% / " + window.uploads.length + " files");
    };
    window.upload_handler_send = function(e, data) {
      if (window.uploads.length === 0) {
        $('#uploadbutton').show();
      }
      data.context = {
        file: data.files[0],
        progress: 0
      };
      window.uploads.push(data.context);
      return window.upload_refresh();
    };
    window.upload_handler_done = function(e, data) {
      return window.upload_refresh(data.context);
    };
    window.upload_handler_fail = function(e, data) {
      window.upload_refresh(data.context);
      return alert("Upload failed: " + data.errorThrown);
    };
    window.upload_handler_progress = function(e, data) {
      data.context.progress = data.loaded;
      return window.upload_refresh();
    };
    $('.contentlink').click(function() {
      var chalid, m, page;
      page = $(this).attr('href').replace('#', '');
      if (window.currentPage !== page) {
        if (m = /^(ctf|challenge)(.+)files$/.exec(page)) {
          $('#content').html("");
          $.get("/files/" + m[1] + "/" + m[2], function(data) {
            var ref, url;
            $('#content').html(data);
            url = "/upload/" + m[1] + "/" + m[2];
            return $('#fileupload').fileupload({
              url: url,
              dataType: 'json',
              send: window.upload_handler_send,
              done: window.upload_handler_done,
              fail: window.upload_handler_fail,
              progress: window.upload_handler_progress
            }).prop('disabled', !$.support.fileInput).parent().addClass((ref = $.support.fileInput) != null ? ref : {
              undefined: 'disabled'
            });
          });
        } else {
          $('#content').pad({
            'padId': page,
            color: window.user.color
          });
        }
        $(".highlighted").removeClass("highlighted");
        $(this).parents(".highlightable").addClass("highlighted");
        chalid = $(this).parents(".highlightable").attr("data-challengeid");
        if (chalid !== void 0) {
          sock.send(JSON.stringify({
            type: 'setactive',
            subject: parseInt(chalid)
          }));
        }
        return window.currentPage = page;
      }
    });
    $("input[type='checkbox']").change(function() {
      $(this).parent().next().css('text-decoration', this.checked ? 'line-through' : 'none');
      sock.send(JSON.stringify({
        type: 'done',
        subject: parseInt($(this).attr('data-chalid')),
        data: this.checked
      }));
      return window.updatePriority();
    });
    $('.impact').popover({
      html: true,
      content: function() {
        return $(this).parent().find('.popover-content').html();
      }
    }).click(function(e) {
      $('.impact').not(this).popover('hide');
      $(this).popover('toggle');
      return e.stopPropagation();
    });
    $('html').click(function() {
      return $('.impact').popover('hide');
    });
    window.setImpact = function(chalId, impact) {
      return sock.send(JSON.stringify({
        type: 'setimpact',
        impact: impact,
        id: chalId
      }));
    };
    $('body').delegate('select[name=impact]', 'change', function() {
      var self;
      self = $(this);
      return window.setImpact(self.attr('data-chalid'), self.val());
    });
    $('.scoreboard-toggle').popover({
      html: true,
      content: function() {
        $.get('/scoreboard', function(ans) {
          return $('#scoreboard').html(ans);
        }, 'html');
        return '<span id="scoreboard">loading...</span>';
      }
    });
    $('body').delegate('.btn-assign', 'click', function() {
      return sock.send(JSON.stringify({
        type: 'assign',
        subject: parseInt($(this).attr('data-chalid'))
      }));
    });
    $('body').delegate('.add-challenge', 'click', function() {
      var a;
      a = $(this).parent().clone();
      a.find('input').val('').removeClass('hide');
      $(this).parent().after(a);
      if (a.hasClass('dummy')) {
        a.removeClass('dummy');
        return $(this).parent().remove();
      }
    });
    $('body').delegate('.remove-challenge', 'click', function() {
      if ($('.category-formgroup').length > 1) {
        return $(this).parent().remove();
      }
    });
    $('body').delegate('.deletefile', 'click', function() {
      var fileid, filename;
      fileid = $(this).attr('data-id');
      filename = $(this).attr('data-name');
      $('#deletefilemodal .alert').removeClass('alert-success alert-error').hide();
      $('#deletefilename').text(filename);
      $('#deletefilebtnno').text('no');
      $('#deletefilebtnyes').show();
      $('#deletefilemodal').data('fileid', fileid).modal('show');
      return false;
    });
    $('body').delegate('.btn-chat', 'click', function() {
      var mymessage;
      mymessage = $('.form-chat-send').val();
      $('.form-chat-send').val("");
      return sock.send(JSON.stringify({
        type: 'chat',
        message: mymessage
      }));
    });
    $('body').delegate('.form-chat-send', 'keypress', function(event) {
      var keycode, mymessage;
      keycode = event.keyCode ? event.keyCode : event.which;
      if (keycode === 13 || keycode === '13') {
        mymessage = $('.form-chat-send').val();
        $('.form-chat-send').val("");
        return sock.send(JSON.stringify({
          type: 'chat',
          message: mymessage
        }));
      }
    });
    $('body').delegate('.hide-cat-btn', 'click', function() {
      var cat, rows, self;
      self = $(this);
      cat = self.attr('data-category');
      rows = $('tr.challenge[data-category="' + cat + '"');
      rows.toggleClass('hidden');
      self.toggleClass('glyphicon-collapse-down');
      return self.toggleClass('glyphicon-expand');
    });
    $('#hidefinished').click(function() {
      if (!$(this).hasClass('active')) {
        $('head').append('<style id="hidefinishedcss">.done { display:none; }</style>');
        return $.cookie('ctfpad_hide', 'true');
      } else {
        $('#hidefinishedcss').remove();
        return $.cookie('ctfpad_hide', 'false');
      }
    });
    if ($.cookie('ctfpad_hide') === 'true') {
      $('#hidefinished').click();
    }
    window.updatePriority = function() {
      var chals, max, priority;
      max = 0;
      chals = $('.challenge');
      priority = function(chal) {
        if (chal.find('input[type=checkbox]').prop('checked')) {
          return 0;
        }
        return chal.attr('data-impactvalue') * chal.attr('data-chalpoints');
      };
      chals.each(function() {
        return max = Math.max(max, priority($(this)));
      });
      return chals.each(function() {
        var cellToColor, challengeId, checked, color, gradientStyle, pct, self, style;
        self = $(this);
        challengeId = self.attr('data-challengeid');
        checked = self.find('input[type=checkbox]').prop('checked');
        cellToColor = self.children().eq(1);
        if (checked) {
          return cellToColor.css({
            'background': 'transparent',
            'text-decoration': 'line-through'
          });
        } else {
          pct = priority(self) / max * 100;
          color = 'rgba(46, 204, 113, .5)';
          if (pct > 85) {
            color = 'rgba(255, 0, 0, .7)';
          } else if (pct > 60) {
            color = 'rgba(255, 110, 0, .7)';
          }
          gradientStyle = color + " " + pct + "%,transparent " + pct + "%, transparent 100%";
          style = ["background: -webkit-linear-gradient(left, " + gradientStyle + ")", "background: -o-linear-gradient(right, " + gradientStyle + ")", "background: -moz-linear-gradient(right, " + gradientStyle + ")", "background: linear-gradient(to right, " + gradientStyle + ")"].join(';');
          return cellToColor.attr('style', style);
        }
      });
    };
    window.updatePriority();
    window.newctf = function() {
      var l, newctf;
      l = $('#ctfform').serializeArray();
      newctf = {
        title: l.shift().value,
        challenges: []
      };
      while (l.length !== 0) {
        newctf.challenges.push({
          'title': l.shift().value,
          'category': l.shift().value,
          'points': parseInt(l.shift().value)
        });
      }
      sock.send(JSON.stringify({
        type: 'newctf',
        data: newctf
      }));
      $('#ctfmodal').modal('hide');
      $('#ctfform').find('input').val('');
      return document.location = '/scope/latest';
    };
    window.ajaxPost = function(url, data, cb) {
      if (data == null) {
        data = null;
      }
      return $.ajax;
    };
    window.changepw = function() {
      return $.ajax({
        url: '/changepassword',
        type: 'post',
        data: $('#passwordform').serialize(),
        dataType: 'json',
        headers: {
          'x-session-id': $.cookie('ctfpad')
        },
        success: function(ans) {
          $('#passwordmodal .alert').removeClass('alert-success alert-error');
          if (ans.success) {
            $('#passwordmodal .alert').addClass('alert-success').text('your password has been changed');
          } else {
            $('#passwordmodal .alert').addClass('alert-error').text(ans.error);
          }
          return $('#passwordmodal .alert').show();
        }
      });
    };
    window.newapikey = function() {
      return $.ajax({
        url: '/newapikey',
        type: 'post',
        dataType: 'text',
        headers: {
          'x-session-id': $.cookie('ctfpad')
        },
        success: function(apikey) {
          if (apikey) {
            return $('#apikey').text(apikey);
          }
        }
      });
    };
    window.modifyctf = function() {
      var ctf, l;
      l = $('#ctfmodifyform').serializeArray();
      ctf = {
        ctf: window.current.id,
        challenges: []
      };
      while (l.length !== 0) {
        ctf.challenges.push({
          'id': parseInt(l.shift().value),
          'title': l.shift().value,
          'category': l.shift().value,
          'points': parseInt(l.shift().value)
        });
      }
      sock.send(JSON.stringify({
        type: 'modifyctf',
        data: ctf
      }));
      $('#ctfmodifymodal').modal('hide');
      return setTimeout(function() {
        return document.location.reload();
      }, 500);
    };
    return window.delete_file_confirmed = function() {
      return $.get('/delete_file/' + $('#deletefilemodal').data('fileid'), function(ans) {
        $('#deletefilemodal .alert').removeClass('alert-success alert-error');
        if (ans.success) {
          $('#deletefilemodal .alert').addClass('alert-success').text('file has been deleted');
        } else {
          $('#deletefilemodal .alert').addClass('alert-error').text(ans.error);
        }
        $('#deletefilemodal .alert').show();
        $('#deletefilebtnno').text('close');
        return $('#deletefilebtnyes').hide();
      }, 'json');
    };
  });

}).call(this);
